/* This file is automatically generated by Lux. Do not modify. */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Inject, Service } from '@/System/Services';
import { Socket } from '@/System/Socket/Socket';
let Invoker = class Invoker {
    constructor() {
        this.aetheryte = {
            teleport: (id) => this.socket.invoke('Aetheryte.Teleport', [id]),
        };
        this.chat = {
            send: (line) => this.socket.invoke('Chat.Send', [line]),
        };
        this.companion = {
            summon: () => this.socket.invoke('Companion.Summon', []),
            setCommand: (command) => this.socket.invoke('Companion.SetCommand', [command]),
        };
        this.gearset = {
            setCurrentGearset: (index) => this.socket.invoke('Gearset.SetCurrentGearset', [index]),
        };
        this.zone = {
            getZone: (mapId) => this.socket.invoke('Zone.GetZone', [mapId]),
            setSelectedZone: (mapId) => this.socket.invoke('Zone.SetSelectedZone', [mapId]),
            setFlagMarker: (mapId, territoryId, x, y) => this.socket.invoke('Zone.SetFlagMarker', [mapId, territoryId, x, y]),
            removeFlagMarker: () => this.socket.invoke('Zone.RemoveFlagMarker', []),
        };
    }
};
__decorate([
    Inject,
    __metadata("design:type", Socket)
], Invoker.prototype, "socket", void 0);
Invoker = __decorate([
    Service()
], Invoker);
export { Invoker };
//# sourceMappingURL=Invoker.js.map